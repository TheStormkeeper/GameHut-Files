TIMING		EQU	0
;----------------------------------------------------------
;		GAMEHUT SHELL
;		BY JON BURTON - AUG 2018
;----------------------------------------------------------
		INCLUDE	SYSTEM.S		;INCLUDES LOTS OF SYSTEM CODE TO MAKE ALL THIS POSSIBLE
		INCLUDE	RINGS.S
		INCLUDE	FLAME.S
USERRAM:	EQU	FLAMEEND
;----------------------------------------------------------
;		VRAM MEMORY MAP IN HEXADECIMAL
;		(NOTE: CHARACTERS ARE 8 X 8 PIXEL BLOCKS)
;----------------------------------------------------------
;		$0000-$0020			BLANK CHARACTER
;		$0020-$8000			CHARACTERS FOR PLAYFIELDS AND SPRITES
;		$C000-$D000			CHARACTER MAP FOR PLAYFIELD 1 (4096 BYTES)
;		$E000-$F000			CHARACTER MAP FOR PLAYFIELD 2 (4096 BYTES)
;		$F800				SPRITE TABLE (960 BYTES)

;----------------------------------------------------------
;		USER VARIABLES
;		- PUT ANY VARIABLES YOU NEED HERE
;----------------------------------------------------------
		RSSET	USERRAM
PLAYX:		RS.L	0
PLAY1X:		RS.W	1			;X POSITION OF PLAYFIELD 1
PLAY2X:		RS.W	1			;X POSITION OF PLAYFIELD 2
PLAYY:		RS.L	0
PLAY1Y:		RS.W	1			;Y POSITION OF PLAYFIELD 1
PLAY2Y:		RS.W	1			;Y POSITION OF PLAYFIELD 2
SONICX:		RS.W	1			;SONIC'S X POSITION
SONICY:		RS.W	1			;SONIC'S Y POSITION
SONICD:		RS.W	1			;SONIC'S DIRECTION
TEMPSCREEN:	RS.B	4096			;RAM TO BUILD TEMPORARY SCREEN MAP
ENDVARS:	RS.B	0

;----------------------------------------------------------
;		INITIALISE USER STUFF
;		- THIS IS WHERE YOU SET UP STUFF BEFORE YOU BEGIN
;----------------------------------------------------------
USERINIT:	MOVE.W	#0,PLAY1X		;SET START PLAYFIELD 1 X POSITION TO ZERO
		MOVE.W	#0,PLAY1Y		;SET START PLAYFIELD 1 Y POSITION TO ZERO

		DMADUMP	MAPGFX,4*32,$820	;DUMP 4 CHARACTERS (SIZE 32 BYTES EACH) TO VRAM LOCATION $820 (MAP GRAPHICS)
		DMADUMP	SPRITEGFX,8*32,$1000	;DUMP 8 CHARACTERS (SIZE 32 BYTES EACH) TO VRAM LOCATION $1000 (SPRITE GRAPHICS)
		DMADUMP	RINGGFX,4*32,$1000+$100	;DUMP 8 CHARACTERS (SIZE 32 BYTES EACH) TO VRAM LOCATION $1100 (SPRITE GRAPHICS, AFTER SONIC)

		LEA.L	TEMPSCREEN,A0		;POINT A0 TO TEMPORARY BUFFER IN RAM TO BUILD MAP BEFORE WE COPY TO VRAM
		MOVE.W	#8-1,D3			;WE'LL MAKE 8 COPIES OF THIS PATTERN
@L4:		LEA.L	CHARGFX,A1		;POINT A1 TO CHARGFX, WHICH IS THE 8 CHARACTER X 4 CHARACTER PATTERN WE'LL COPY MULITPLE TIMES
		MOVE.W	#4-1,D1			;4 ROWS
@L3:		MOVE.W	#8-1,D0			;COPY EACH ROW REPEATED ACROSS THE SCREEN 8 TIMES HORIZONTALLY
@L2:		MOVE.W	#4-1,D2			;4 LONG-WORDS = 8 CHARACTERS WIDE
@L1:		MOVE.L	(A1)+,(A0)+		;COPY FROM CHARGFX TO THE TEMPSCREEN. THE + MEANS INCREMENT THE POINTERS
		DBRA	D2,@L1			;LOOP BACK TO @L1
		SUB.L	#16,A1			;POINT BACK TO THE START OF THE CURRENT CHARGFX ROW
		DBRA	D0,@L2			;LOOP BACK TO @L2
		ADD.L	#16,A1			;MOVE ONTO THE NEXT CHARGFX ROW
		DBRA	D1,@L3			;LOOP BACK TO @L3
		DBRA	D3,@L4			;LOOP BACK TO @L4

		DMADUMP	TEMPSCREEN,4096,$C000	;COPY TEMPSCREEN WHICH IS 4096 BYTES IN SIZE TO VRAM ADDRESS $C000

		LEA.L	PALETTE1,A0		;DOWNLOAD A PALETTE FOR THE MAP TO USE
		BSR	SETPAL1			;OVERRIGHT FIRST PALETTE

		LEA.L	PALETTE2,A0		;DOWNLOAD A PALETTE FOR THE SPRITES TO USE
		BSR	SETPAL2			;OVERRIGHT SECOND PALETTE

		MOVE.W	#$80+160-8,SONICX	;SONIC'S X START POSITION
		MOVE.W	#$80+112-13,SONICY	;SONIC'S Y START POSITION
		MOVE.W	#0,SONICD		;SONIC'S START DIRECTION

		JSR	INITFLAME
		JSR	RINGINIT

		JSR	DUMPCOLS		;COPY ALL PALETTES TO CRAM (COLOUR RAM)

		RTS

;------------------------------
;	MAIN GAME LOOP
;------------------------------
MAIN:		WAITVBI					;WAITS FOR THE START OF THE NEXT FRAME
		IF	TIMING
		WDEST	CRAMW,$0000			;COLOUR TIMING BAR
		MOVE.W	#$000F,VDP_DATA			;IN RED
		ENDC

		JSR	DRAWFLAME

		ADD.W	#1,PLAY1X			;SCROLL PLAYFIELD 1 RIGHT BY ONE PIXEL
		ADD.W	#1,PLAY1Y			;SCROLL PLAYFIELD 1 UP BY ONE PIXEL
;ADD SPRITES
		LEA.L	SPRITETEMP,A1			;POINT TO TEMPORARY MEMORY TO BUILD SPRITE LIST
		MOVE.W	#1,D7				;SPRITE NUMBER
;FIRST SONIC
		MOVE.W	SONICY,(A1)+			;Y POSITION ($80 IS TOP OF SCREEN)
		MOVE.W	#S_2X4,D0			;SIZE 2X4 CHARACTERS
		ADD.W	D7,D0				;ADD CURRENT SPRITE NUMBER
		MOVE.W	D0,(A1)+			;WRITE TO SPRITE TABLE
		MOVE.W	#S_PAL2+$1000/32,D0		;PALETTE NUMBER+GRAPHIC VRAM LOCATION/32
		ADD.W	SONICD,D0			;ADD SONIC'S DIRECTION
		MOVE.W	D0,(A1)+			;WRITE TO SPRITE TABLE
		MOVE.W	SONICX,(A1)+			;X POSITION ($80 IS LEFT OF SCREEN)

		ADDQ.W	#1,D7				;MOVE ON TO NEXT SPRITE NUMBER

		JSR	PROCRING			;ADD ANY RINGS TO SPRITELIST
							;A1=POINTER TO NEXT SPRITE ENTRY
							;D7=NEXT SPRITE NUMBER

;FINISHED ADDING SPRITES
		MOVE.L	#$10000,(A1)+			;TERMINATE SPRITE LIST
		MOVE.L	#1,(A1)+			;	"  "

		JSR	CONVFLAME

;MOVE SONIC
		BTST	#J_RIGHT,JOYPAD0
		BNE.S	@MOVE1
		ADD.W	#1,SONICX
		MOVE.W	#0,SONICD
@MOVE1:
		BTST	#J_LEFT,JOYPAD0
		BNE.S	@MOVE2
		SUB.W	#1,SONICX
		MOVE.W	#$800,SONICD
@MOVE2:
		BTST	#J_DOWN,JOYPAD0
		BNE.S	@MOVE3
		ADD.W	#1,SONICY
@MOVE3:
		BTST	#J_UP,JOYPAD0
		BNE.S	@MOVE4
		SUB.W	#1,SONICY
@MOVE4:
		BTST	#J_BUT_A,JOYPAD0
		BNE.S	@NORING
;ADD A RING
		MOVE.W	SONICX,D3			;X POS
		MOVE.W	SONICY,D4			;Y POS
		JSR	GETRANDOM			;RETURNS A RANDOM NUMBER FROM 0-255 IN REGISTER D0
		MOVE.L	D0,D5
		EXT.W	D5				;NUMBER FROM -126 TO +127
		SWAP	D5				;ADDS PRECISION
		ASR.L	#6,D5				;REMOVE A BIT OF PRECISION - X MOMENTUM
		JSR	GETRANDOM			;RETURNS A RANDOM NUMBER FROM 0-255 IN REGISTER D0
		MOVE.L	D0,D6
		EXT.W	D6				;NUMBER FROM -126 TO +127
		SWAP	D6				;ADDS PRECISION
		ASR.L	#6,D6				;REMOVE A BIT OF PRECISION
		ADD.L	#-$30000,D6			;Y MOMENTUM
		MOVE.L	#$1000,D7			;GRAVITY
		JSR	ADDRING

@NORING:
		IF	TIMING
		WDEST	CRAMW,$0000
		MOVE.W	#$0000,VDP_DATA
		ENDC
		BRA	MAIN				;LOOP BACK TO WAIT FOR NEXT FRAME

;----------------------------------------------------------
;		USER VBI ROUTINES
;		- PUT TIME CRITICAL CODE THAT MUST CALLED DURING THE VERTICAL BLANK HERE
;----------------------------------------------------------
USERVBI:	LEA.L	VDP_DATA,A1
		LEA.L	VDP_CONTROL,A2
;SET HORIZONTAL OFFSETS
		MOVE.L	#$7C000003,(A2)
		MOVE.L	PLAYX,(A1)		;THIS TELLS THE VDP (VISUAL DISPLAY PROCESSOR) WHAT X POSITION THE PLAYFIELDS SHOULD BE AT

;SET VERTICAL OFFSETS
		MOVE.L	#$40000010,(A2)		;THIS TELLS THE VDP WHAT Y POSITION THE PLAYFIELDS SHOULD BE AT
		MOVE.L	PLAYY,(A1)

;COPY SPRITE TABLE TO VRAM
		JSR	SPRITEDUMP
;READ JOYPAD
		BSR	READJOY			;READ THE JOYPAD

		RTS

;----------------------------------------------------------
;		PUT DATA BELOW HERE
;----------------------------------------------------------

;----------------------------------------------------------
;		CHARACTER CODES TO BUILD OUR PATTERN
;
;		THE CODE IS IN THE FORMAT $NNNN
;
;		THE LAST TWO NUMBERS ($00NN) REFER TO THE CHARACTER NUMBER IN VRAM TO USE
;		(THE CHARACTER NUMBER IS THE VRAM ADDRESS DIVIDED BY 32 (OR DIVIDED BY $20 HEXADECIMAL))
;
;		IF THE FIRST NUMBER  ($N000) IS '1' IT MEANS MIRROR THE CHARACTER VERTICALLY
;		IF THE SECOND NUMBER ($0N00) IS '8' IT MEANS MIRROR THE CHARACTER HORIZONTALLY
;
;		SO WHEN WE HAVE A DIAGONAL CHARACTER LINE THIS - / WE CAN MIRROR IT TO GET THIS \
;		SO WE CAN BUILD THIS - /\
;				       \/   USING ONE DIAGONAL AND MIRRORING
;----------------------------------------------------------
CHARGFX:	DC.W	$0043,$0044,$0041,$0041,$0841,$0841,$0844,$0843
		DC.W	$0042,$0042,$0043,$0044,$0844,$0843,$0842,$0842
		DC.W	$1042,$1042,$1043,$1044,$1844,$1843,$1842,$1842
		DC.W	$1043,$1044,$1041,$1041,$1841,$1841,$1844,$1843

;----------------------------------------------------------
;		MAP GRAPHICS
;----------------------------------------------------------
MAPGFX:		DC.B	$66,$66,$66,$66		;01	FULL CHARACTER USING COLOUR 6
		DC.B	$66,$66,$66,$66
		DC.B	$66,$66,$66,$66
		DC.B	$66,$66,$66,$66
		DC.B	$66,$66,$66,$66
		DC.B	$66,$66,$66,$66
		DC.B	$66,$66,$66,$66
		DC.B	$66,$66,$66,$66

		DC.B	$77,$77,$77,$77		;02	FULL CHARACTER USING COLOUR 7
		DC.B	$77,$77,$77,$77
		DC.B	$77,$77,$77,$77
		DC.B	$77,$77,$77,$77
		DC.B	$77,$77,$77,$77
		DC.B	$77,$77,$77,$77
		DC.B	$77,$77,$77,$77
		DC.B	$77,$77,$77,$77

		DC.B	$FF,$66,$66,$66		;03	HALF OF THE DIAGONAL LINE
		DC.B	$77,$FF,$66,$66
		DC.B	$77,$77,$FF,$66
		DC.B	$77,$77,$77,$FF
		DC.B	$77,$77,$77,$77
		DC.B	$77,$77,$77,$77
		DC.B	$77,$77,$77,$77
		DC.B	$77,$77,$77,$77

		DC.B	$66,$66,$66,$66		;04	OTHER HALF OF THE DIAGONAL LINE
		DC.B	$66,$66,$66,$66
		DC.B	$66,$66,$66,$66
		DC.B	$66,$66,$66,$66
		DC.B	$FF,$66,$66,$66
		DC.B	$77,$FF,$66,$66
		DC.B	$77,$77,$FF,$66
		DC.B	$77,$77,$77,$FF

;----------------------------------------------------------
;		SPRITE GRAPHICS
;		2 X 4 CHARACTERS ARRANGED AS FOLLOWS -
;
;		1 5
;		2 6
;		3 7
;		4 8
;----------------------------------------------------------
SPRITEGFX:	DC.B	$00,$11,$11,$11		;1
		DC.B	$01,$22,$22,$22
		DC.B	$00,$12,$22,$13
		DC.B	$00,$01,$22,$13
		DC.B	$00,$00,$12,$13
		DC.B	$00,$01,$22,$22
		DC.B	$00,$12,$22,$22
		DC.B	$01,$22,$22,$22

		DC.B	$00,$11,$12,$22		;2
		DC.B	$00,$01,$22,$22
		DC.B	$00,$12,$22,$23
		DC.B	$01,$22,$22,$23
		DC.B	$11,$11,$11,$11
		DC.B	$00,$00,$00,$13
		DC.B	$00,$00,$01,$31
		DC.B	$00,$00,$13,$14

		DC.B	$00,$00,$11,$44		;3
		DC.B	$00,$00,$01,$44
		DC.B	$00,$00,$00,$14
		DC.B	$00,$00,$00,$01
		DC.B	$00,$00,$00,$11
		DC.B	$00,$00,$01,$44
		DC.B	$00,$00,$01,$44
		DC.B	$00,$00,$16,$66

		DC.B	$00,$00,$16,$66		;4
		DC.B	$00,$00,$11,$11
		DC.B	$00,$00,$00,$00
		DC.B	$00,$00,$00,$00
		DC.B	$00,$00,$00,$00
		DC.B	$00,$00,$00,$00
		DC.B	$00,$00,$00,$00
		DC.B	$00,$00,$00,$00

		DC.B	$11,$00,$11,$00		;5
		DC.B	$22,$11,$21,$00
		DC.B	$22,$22,$21,$00
		DC.B	$32,$22,$21,$00
		DC.B	$22,$22,$22,$10
		DC.B	$24,$42,$22,$40
		DC.B	$44,$44,$22,$40
		DC.B	$44,$45,$24,$50

		DC.B	$44,$41,$24,$10		;6
		DC.B	$24,$45,$41,$11
		DC.B	$34,$44,$33,$10
		DC.B	$34,$44,$31,$00
		DC.B	$33,$33,$10,$00
		DC.B	$11,$11,$00,$00
		DC.B	$12,$33,$11,$00
		DC.B	$41,$33,$44,$10

		DC.B	$44,$13,$14,$10		;7
		DC.B	$44,$11,$41,$00
		DC.B	$41,$21,$10,$00
		DC.B	$11,$10,$00,$00
		DC.B	$21,$11,$10,$00
		DC.B	$21,$44,$10,$00
		DC.B	$41,$16,$61,$10
		DC.B	$64,$41,$16,$61

		DC.B	$46,$66,$61,$66		;8
		DC.B	$11,$11,$11,$11
		DC.B	$00,$00,$00,$00
		DC.B	$00,$00,$00,$00
		DC.B	$00,$00,$00,$00
		DC.B	$00,$00,$00,$00
		DC.B	$00,$00,$00,$00
		DC.B	$00,$00,$00,$00

;----------------------------------------------------------
RINGGFX:	DC.B	$00,$00,$08,$74		;1
		DC.B	$00,$08,$77,$77
		DC.B	$00,$87,$78,$99
		DC.B	$09,$87,$89,$00
		DC.B	$09,$78,$00,$00
		DC.B	$98,$79,$00,$00
		DC.B	$97,$70,$00,$00
		DC.B	$97,$40,$00,$00

		DC.B	$97,$40,$00,$00
		DC.B	$97,$40,$00,$00
		DC.B	$98,$47,$00,$00
		DC.B	$09,$74,$00,$00
		DC.B	$09,$87,$47,$00
		DC.B	$00,$98,$74,$44
		DC.B	$00,$09,$98,$77
		DC.B	$00,$00,$09,$99

		DC.B	$44,$40,$00,$00
		DC.B	$77,$74,$40,$00
		DC.B	$99,$87,$44,$00
		DC.B	$00,$99,$84,$40
		DC.B	$00,$00,$97,$40
		DC.B	$00,$00,$98,$74
		DC.B	$00,$00,$09,$74
		DC.B	$00,$00,$09,$74

		DC.B	$00,$00,$09,$74
		DC.B	$00,$00,$09,$77
		DC.B	$00,$00,$98,$78
		DC.B	$00,$00,$87,$70
		DC.B	$00,$98,$77,$80
		DC.B	$47,$77,$88,$00
		DC.B	$77,$89,$90,$00
		DC.B	$99,$90,$00,$00

;----------------------------------------------------------
;		USER PALETTES
;----------------------------------------------------------
PALETTE1:	DC.W	$0000,$0044,$0066,$0088
		DC.W	$00AA,$00EE
		DC.W	$0888,$0F00		;THESE TWO ARE THE ONES WE USE FOR THE TWO TILE COLOURS
		DC.W	$0EEE,$0CCC,$0AAA,$0888
		DC.W	$0666,$0444,$0222,$0000

PALETTE2:	DC.W	$0000,$0000,$0F80,$08CE	;SONIC PALETTE
		DC.W	$0EEE,$00E0,$000E,$00EE
		DC.W	$0088,$0044,$0000,$0000
		DC.W	$0000,$0000,$0000,$0000

PALETTE3:	DC.W	$0000,$0002,$0004,$0006	;FLAME PALETTE
		DC.W	$0008,$000A,$000C,$000E
		DC.W	$002E,$004E,$006E,$008E
		DC.W	$00AE,$00CE,$00EE,$00EE
